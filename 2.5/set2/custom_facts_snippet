add to cloudinit
<%= snippet 'custom_facts_snippet' %>

<%#
kind: snippet
name: custom_facts_snippet
description: |
  Installs custom facts (firstboot, security, networking, provisioning, virtualization).
  Facts only run if /etc/ansible/facts.d/facts_enabled exists.
-%>

mkdir -p /etc/ansible/facts.d
chmod 755 /etc/ansible/facts.d

# Enable facts (comment this line if you want to control manually)
touch /etc/ansible/facts.d/facts_enabled

cat > /etc/ansible/facts.d/firstboot_reboot.fact << 'EOF'
#!/bin/bash
[ -f /etc/ansible/facts.d/facts_enabled ] || exit 0
RESULT="unknown"
if grep -qi relabel /var/log/messages; then
    RESULT="selinux_relabel"
elif grep -qi "cloud-init.*reboot" /var/log/cloud-init.log; then
    RESULT="cloudinit_trigger"
elif journalctl -b -1 | grep -qi "systemd-firstboot"; then
    RESULT="systemd_firstboot"
elif journalctl -b -1 | grep -qi "dnf"; then
    RESULT="kernel_update"
fi
echo "firstboot_reboot=$RESULT"
EOF
chmod +x /etc/ansible/facts.d/firstboot_reboot.fact

cat > /etc/ansible/facts.d/security.fact << 'EOF'
#!/bin/bash
[ -f /etc/ansible/facts.d/facts_enabled ] || exit 0
echo "selinux_mode=$(getenforce 2>/dev/null)"
echo "fips_enabled=$(sysctl -n crypto.fips_enabled 2>/dev/null || echo 0)"
EOF
chmod +x /etc/ansible/facts.d/security.fact

cat > /etc/ansible/facts.d/networking.fact << 'EOF'
#!/bin/bash
[ -f /etc/ansible/facts.d/facts_enabled ] || exit 0
DEFAULT_IF=$(ip route | awk '/^default/ {print $5; exit}')
DEFAULT_GW=$(ip route | awk '/^default/ {print $3; exit}')
DNS=$(grep "^nameserver" /etc/resolv.conf | awk '{print $2}' | tr '\n' ',' | sed 's/,$//')
echo "default_interface=$DEFAULT_IF"
echo "default_gateway=$DEFAULT_GW"
echo "dns_servers=$DNS"
EOF
chmod +x /etc/ansible/facts.d/networking.fact

cat > /etc/ansible/facts.d/provisioning.fact << 'EOF'
#!/bin/bash
[ -f /etc/ansible/facts.d/facts_enabled ] || exit 0
CLOUD_INIT_DONE="no"
[ -f /var/lib/cloud/instance/boot-finished ] && CLOUD_INIT_DONE="yes"
TEMPLATE=$(grep -m1 "Generated by" /var/lib/cloud/instance/user-data.txt 2>/dev/null || echo "unknown")
echo "cloud_init_finished=$CLOUD_INIT_DONE"
echo "provisioning_template=\"$TEMPLATE\""
EOF
chmod +x /etc/ansible/facts.d/provisioning.fact

cat > /etc/ansible/facts.d/virtualization.fact << 'EOF'
#!/bin/bash
[ -f /etc/ansible/facts.d/facts_enabled ] || exit 0
HYPERVISOR=$(dmidecode -s system-manufacturer 2>/dev/null || echo "unknown")
GUEST_AGENT="not_installed"
if systemctl is-active --quiet qemu-guest-agent; then
    GUEST_AGENT="qemu-guest-agent_running"
elif systemctl is-active --quiet vmtoolsd; then
    GUEST_AGENT="vmware-tools_running"
fi
echo "hypervisor=$HYPERVISOR"
echo "guest_agent=$GUEST_AGENT"
EOF
chmod +x /etc/ansible/facts.d/virtualization.fact
